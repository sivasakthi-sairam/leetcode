class MedianFinder {

    private PriorityQueue<Integer> maxHeap;
    private PriorityQueue<Integer> minHeap;

    public MedianFinder() {
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        minHeap = new PriorityQueue<>();
    }

    public void addNum(int num) {
        if (maxHeap.size() == 0) {
            maxHeap.add(num);
        } else if (maxHeap.size() == minHeap.size()) {
            if (num < minHeap.peek()) {
                maxHeap.add(num);
            } else {
                int temp = minHeap.poll();
                maxHeap.add(temp);
                minHeap.add(num);
            }
        } else {
            if (minHeap.size() == 0) {
                if (num > maxHeap.peek()) {
                    minHeap.add(num);
                } else {
                    int temp = maxHeap.poll();
                    minHeap.add(temp);
                    maxHeap.add(num);
                }
            } else if (num >= minHeap.peek()) {
                minHeap.add(num);
            } else {
                if (num < maxHeap.peek()) {
                    int temp = maxHeap.poll();
                    maxHeap.add(num);
                    minHeap.add(temp);
                } else {
                    minHeap.add(num);
                }
            }
        }
    }

    public double findMedian() {
        int l = maxHeap.size();
        int r = minHeap.size();
        double ans;
        if ((l + r) % 2 == 1) {
            ans = maxHeap.peek();
        } else {
            ans = maxHeap.peek();
            ans += minHeap.peek();
            ans /= 2;
        }
        return ans;
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */