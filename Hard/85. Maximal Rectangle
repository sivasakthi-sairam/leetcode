class Solution {
    public static int maxHist(int[] arr) {
        int i = 0;
        Stack<Integer> stack = new Stack<>();
        int top;
        int curr_area;
        int max_area = 0;
        while (i < arr.length) {
            if (stack.empty() || arr[stack.peek()] <= arr[i]) {
                stack.push(i++);
            } else {
                top = arr[stack.pop()];
                curr_area = top * (stack.empty() ? i : (i - stack.peek() - 1));
                max_area = Math.max(max_area, curr_area);
            }
        }
        while (!stack.empty()) {
            top = arr[stack.pop()];
            curr_area = top * (stack.empty() ? i : (i - stack.peek() - 1));
            max_area = Math.max(max_area, curr_area);
        }
        return max_area;
    }

    public static int maxRect (int[][] arr) {
        int result = maxHist(arr[0]);
        for (int i = 1;i < arr.length;i++) {
            for (int j = 0;j < arr[0].length;j++) {
                if (arr[i][j] == 1) {
                    arr[i][j] += arr[i-1][j];
                }
            }
            result = Math.max(result, maxHist(arr[i]));
        }
        return result;
    }

    public int maximalRectangle(char[][] matrix) {
        int[][] arr = new int[matrix.length][matrix[0].length];
        for (int i = 0;i < matrix.length;i++) {
            for (int j = 0;j < matrix[0].length;j++) {
                if (matrix[i][j] == '1') {
                    arr[i][j] = 1;
                }
            }
        }
        int result = maxRect(arr);
        return result;
    }
}