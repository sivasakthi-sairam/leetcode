class Solution {

    public boolean dfs(List<List<Integer>> adjList, boolean[] visited, int node, int dest) {
        if (visited[node]) {
            return false;
        }
        if (node == dest) {
            return true;
        }
        visited[node] = true;
        for (int adj : adjList.get(node)) {
            if (!visited[adj]) {
                if (dfs(adjList, visited, adj, dest)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0;i < n;i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        boolean[] visited = new boolean[n];
        return dfs(adjList, visited, source, destination);
    }
}