/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if (root == null) {
            return new ArrayList<Integer>();
        }
        Deque<TreeNode> deque = new LinkedList<>();
        deque.add(root);
        List<Integer> result = new ArrayList<>();
        while (deque.size() > 0) {
            TreeNode rightMost = null;
            TreeNode temp = null;
            int qLen = deque.size();
            for (int i = 0;i < qLen;i++) {
                temp = deque.removeFirst();
                if (temp != null) {
                    rightMost = temp;
                    deque.add(rightMost.left);
                    deque.add(rightMost.right);
                }
            }
            if (rightMost != null) {
                result.add(rightMost.val);
            }
        }
        return result;
    }
}