class Solution {
    public static void merge(int[] nums, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int[] a = new int[n1];
        int[] b = new int[n2];
        for(int i = 0;i < n1;i++) {
            a[i] = nums[l + i];
        }
        for(int i = 0;i < n2;i++) {
            b[i] = nums[m + 1 + i];
        }
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (a[i] < b[j]) {
                nums[k] = a[i];
                i++;
            } else {
                nums[k] = b[j];
                j++;
            }
            k++;
        }
        while(i < n1) {
            nums[k] = a[i];
            i++;
            k++;
        }
        while(j < n2) {
            nums[k] = b[j];
            j++;
            k++;
        }
    }

    public static void mergeSort (int[] nums, int l, int r) {
        if (l < r) {
            int m = (l + (r - 1)) / 2;
            mergeSort(nums, l, m);
            mergeSort(nums, m+1, r);
            merge(nums, l, m, r);
        }
    }

    public int[] sortArray(int[] nums) {
        mergeSort(nums, 0, nums.length - 1);
        return nums;
    }
}