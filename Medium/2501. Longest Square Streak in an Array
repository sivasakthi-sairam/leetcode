class Solution {

    public int findIndex(int n, int l, int[] nums) {
        int h = nums.length - 1, mid;
        while (l <= h) {
            mid = (l + h) / 2;
            if (nums[mid] == n) {
                return mid;
            }
            if (nums[mid] < n) {
                l = mid + 1;
            } else {
                h = mid - 1;
            }
        }
        return l;
    }

    public int longestSquareStreak(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length, maxLen = 0, curLen, i, cur, req, idx;
        boolean[] visited = new boolean[n];
        for (i = 0;i < n;i++) {
            if (visited[i]) {
                continue;
            }
            cur = nums[i];
            curLen = 1;
            while (true) {
                req = cur * cur;
                idx = findIndex(req, i + 1, nums);
                if (idx >= 0 && idx < n && nums[idx] == req) {
                    visited[idx] = true;
                    cur = req;
                    curLen++;
                } else {
                    break;
                }
            }
            maxLen = Math.max(maxLen, curLen);
        }
        return (maxLen < 2) ? -1 : maxLen;
    }
}