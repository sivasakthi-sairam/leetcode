/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public String findSmaller(TreeNode node, String cur) {
        if (node == null) {
            return cur;
        }
        if (node.left != null && node.right != null) {
            String left = findSmaller(node.left, (char) (97 + node.val) + cur);
            String right = findSmaller(node.right, (char) (97 + node.val) + cur);
            int compare = left.compareTo(right);
            if (compare > 0) {
                return right;
            } else {
                return left;
            }
        } else if (node.left != null) {
            return findSmaller(node.left, (char) (97 + node.val) + cur);
        } else if (node.right != null){
            return findSmaller(node.right, (char) (97 + node.val) + cur);
        }
        return (char) (97 + node.val) + cur;
    }

    public String smallestFromLeaf(TreeNode root) {
        return findSmaller(root, "");
    }
}