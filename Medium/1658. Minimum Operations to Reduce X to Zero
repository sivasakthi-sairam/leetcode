class Solution {
    public int minOperations(int[] nums, int x) {
        int n = nums.length;
        Map<Integer, Integer> prefixSum = new HashMap<>();
        prefixSum.put(0, 0);
        int sum = 0;
        for (int i = 0;i < n;i++) {
            sum += nums[i];
            prefixSum.put(sum, i);
        }
        int curSum = 0;
        int goal = sum - x;
        int longest = 0;
        for (int i = 0;i < n;i++) {
            curSum += nums[i];
            int cur = curSum - goal;
            if (prefixSum.containsKey(cur)) {
                if (cur == 0) {
                    longest = Math.max(longest, i - prefixSum.get(cur) + 1);
                } else {
                    longest = Math.max(longest, i - prefixSum.get(cur));
                }
            }
        }
        if (longest == 0) {
            if (goal == 0) {
                return n;
            } else {
                return -1;
            }
        }
        return (n - longest);
    }
}