class NumArray {

    int[] st;
    int[] numArr;

    public void constructSegmentTree(int[] arr, int n) {
        int x = (int) Math.ceil(Math.log(n) / Math.log(2));
        int maxSize = 2 * (int) Math.pow(2, x) - 1;
        st = new int[maxSize];
        constructTreeUtil(0, n-1, arr, st, 0);
    }

    public int constructTreeUtil(int ss, int se, int[] arr, int[] st, int si) {
        if (ss == se) {
            st[si] = arr[ss];
            return st[si];
        }
        int mid = (ss + se) / 2;
        st[si] = constructTreeUtil(ss, mid, arr, st, 2 * si + 1) + constructTreeUtil(mid+1, se, arr, st, 2 * si + 2);
        return st[si];
    }

    public int rangeSumUtil(int ss, int se, int qs, int qe, int si) {
        if (qs <= ss && qe >= se) {
            return st[si];
        }
        if (se < qs || ss > qe) {
            return 0;
        }
        int mid = (ss + se) / 2;
        return rangeSumUtil(ss, mid, qs, qe, 2 * si + 1) + rangeSumUtil(mid + 1, se, qs, qe, 2 * si + 2);
    }

    public void updateUtil(int ss, int se, int i, int diff, int si) {
        if (i < ss || i > se) {
            return;
        }
        st[si] += diff;
        if (ss != se) {
            int mid = (ss + se) / 2;
            updateUtil(ss, mid, i, diff, 2 * si + 1);
            updateUtil(mid + 1, se, i, diff, 2 * si + 2);
        }
    }

    public NumArray(int[] nums) {
        numArr = nums;
        constructSegmentTree(nums, nums.length);
    }

    public void update(int index, int val) {
        int newVal = val - numArr[index];
        numArr[index] = val;
        updateUtil(0, numArr.length - 1, index, newVal, 0);
    }

    public int sumRange(int left, int right) {
        return rangeSumUtil(0, numArr.length - 1, left, right, 0);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */