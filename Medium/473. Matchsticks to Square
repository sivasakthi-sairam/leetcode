class Solution {
    int[] used;
    int sideLen;

    public boolean backtracking(int index, int[] matchsticks) {
        if (index == matchsticks.length) {
            return true;
        }
        for (int i = 0;i < 4;i++) {
            if (used[i] + matchsticks[index] <= sideLen) {
                used[i] += matchsticks[index];
                if (backtracking(index + 1, matchsticks)) {
                    return true;
                }
                used[i] -= matchsticks[index];
            }
        }
        return false;
    }

    public boolean makesquare(int[] matchsticks) {
        used = new int[4];
        int sum = 0;
        for (int i : matchsticks) {
            sum += i;
        }
        if (sum % 4 != 0) {
            return false;
        }
        sideLen = sum / 4;
        Arrays.sort(matchsticks);
        int n = matchsticks.length;
        int temp;
        for (int i = 0;i < n/2;i++) {
            temp = matchsticks[i];
            matchsticks[i] = matchsticks[n-i-1];
            matchsticks[n-i-1] = temp;
        }
        return backtracking(0, matchsticks);
    }
}