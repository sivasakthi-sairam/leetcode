class WordDictionary {

    class Node {
        char val;
        int count;
        int endsHere;
        Node[] child;

        public Node() {
            this.child = new Node[26];
        }
    }

    Node root;

    public WordDictionary() {
        root = new Node();
    }

    public void addWord(String word) {
        Node curr = root;
        int in;
        for (int i = 0;i < word.length();i++) {
            in = word.charAt(i) - 'a';
            if (curr.child[in] == null) {
                curr.child[in] = new Node();
            }
            curr.child[in].count++;
            curr = curr.child[in];
        }
        curr.endsHere += 1;
    }

    public boolean search(String word) {
        return backtrackSearch(root, word, 0, word.length());
    }

    public boolean backtrackSearch(Node curr, String word, int pos, int n) {
        int in = word.charAt(pos) - 'a';
        if (word.charAt(pos) == '.') {
            Node current;
            boolean result = false;
            for (int i = 0;i < 26;i++) {
                if (pos == n-1 && curr.child[i] != null) {
                    current = curr.child[i];
                    result |= (current.endsHere > 0);
                } else if (curr.child[i] != null && backtrackSearch(curr.child[i], word, pos + 1, n)) {
                    return true;
                }
            }
            return result;
        } else if (curr.child[in] != null) {
            if (pos == n-1) {
                return (curr.child[in].endsHere > 0);
            }
            return backtrackSearch(curr.child[in], word, pos + 1, n);
        }
        return false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */