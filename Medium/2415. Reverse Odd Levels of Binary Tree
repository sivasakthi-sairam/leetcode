/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        if (root == null) {
            return root;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        List<Integer> list = new ArrayList<>();
        int size, idx, i;
        int level = 0;
        TreeNode cur;
        while (queue.size() > 0) {
            size = queue.size();
            idx = size - 1;
            for (i = 0;i < size;i++) {
                cur = queue.remove();
                if ((level % 2) == 1) {
                    cur.val = list.get(idx);
                    idx--;
                }
                if (cur.left != null) {
                    queue.add(cur.left);
                    if (level % 2 == 0) {
                        list.add(cur.left.val);
                    }
                }
                if (cur.right != null) {
                    queue.add(cur.right);
                    if (level % 2 == 0) {
                        list.add(cur.right.val);
                    }
                }
            }
            if (level % 2 == 1) {
                list.clear();
            }
            level++;
        }
        return root;
    }
}