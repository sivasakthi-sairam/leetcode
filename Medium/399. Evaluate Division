class Solution {

    public double bfs(String source, String target, Map<String, List<Pair<String, Double>>> adjMap) {
        if(!adjMap.containsKey(source) || !adjMap.containsKey(target)) {
            return -1;
        }
        Queue<Pair<String, Double>> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        queue.add(new Pair<>(source, 1d));
        visited.add(source);
        while (queue.size() > 0) {
            Pair<String, Double> curr = queue.remove();
            String currNode = curr.getKey();
            double val = curr.getValue();
            if (currNode.equals(target)) {
                return val;
            }
            for (Pair<String, Double> pair : adjMap.get(currNode)) {
                if (!visited.contains(pair.getKey())) {
                    queue.add(new Pair<>(pair.getKey(), val * pair.getValue()));
                    visited.add(pair.getKey());
                }
            }
        }
        return -1;
    }

    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        int n = equations.size();
        Map<String, List<Pair<String, Double>>> adjMap = new HashMap<>();
        for (int i = 0;i < n;i++) {
            String a = equations.get(i).get(0);
            String b = equations.get(i).get(1);
            double val = values[i];
            adjMap.putIfAbsent(a, new ArrayList<>());
            adjMap.putIfAbsent(b, new ArrayList<>());
            adjMap.get(a).add(new Pair<>(b, val));
            adjMap.get(b).add(new Pair<>(a, 1 / val));
        }
        int queryLen = queries.size();
        double[] ans = new double[queryLen];
        for (int i = 0;i < queryLen;i++) {
            ans[i] = bfs(queries.get(i).get(0), queries.get(i).get(1), adjMap);
        }
        return ans;
    }
}