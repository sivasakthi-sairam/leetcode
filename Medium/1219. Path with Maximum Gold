class Solution {

    int max;
    int[] dir = new int[]{-1, 0, 1, 0, -1};

    public boolean isSafe(int r, int c, int[][] grid) {
        if (r >= 0 && r < grid.length && c >= 0 && c < grid[0].length) {
            return true;
        }
        return false;
    }

    public void backtracking(int[][] grid, int row, int col, int curSum) {
        max = Math.max(max, curSum);
        int r, c;
        for (int i = 0;i < 4;i++) {
            r = row + dir[i];
            c = col + dir[i+1];
            if (isSafe(r, c, grid) && grid[r][c] != 0) {
                int temp = grid[r][c];
                grid[r][c] = 0;
                backtracking(grid, r, c, curSum + temp);
                grid[r][c] = temp;
            }
        }
    }

    public int getMaximumGold(int[][] grid) {
        max = 0;
        int m = grid.length, n = grid[0].length;
        for (int i = 0;i < m;i++) {
            for (int j = 0;j < n;j++) {
                if (grid[i][j] != 0) {
                    int temp = grid[i][j];
                    grid[i][j] = 0;
                    backtracking(grid, i, j, temp);
                    grid[i][j] = temp;
                }
            }
        }
        return max;
    }
}