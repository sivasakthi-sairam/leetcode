class Solution {
    class Node implements Comparable<Node> {
        int neighPoint;
        int cost;
        public Node (int point, int cost) {
            this.neighPoint = point;
            this.cost = cost;
        }
        public int compareTo(Node that) {
            return this.cost - that.cost;
        }
    }

    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        List<List<Node>> adjList = new ArrayList<>();
        for (int i = 0;i < n;i++) {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0;i < n;i++) {
            for (int j = i+1;j < n;j++) {
                int cost = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
                adjList.get(i).add(new Node(j, cost));
                adjList.get(j).add(new Node(i, cost));
            }
        }
        PriorityQueue<Node> minHeap = new PriorityQueue<>();
        boolean[] visited = new boolean[n];
        int visitedCount = 0;
        minHeap.add(new Node(0, 0));
        int resultCost = 0;
        while (visitedCount < n) {
            Node currNode = minHeap.remove();
            int neighPoint = currNode.neighPoint;
            int cost = currNode.cost;
            if (visited[neighPoint]) {
                continue;
            }
            visited[neighPoint] = true;
            visitedCount++;
            resultCost += cost;
            for (Node adjNode : adjList.get(neighPoint)) {
                if (!visited[adjNode.neighPoint]) {
                    minHeap.add(adjNode);
                }
            }
        }
        return resultCost;
    }
}