class Trie {

    class Node {
        char val;
        int count;
        int endsHere;
        Node[] child;
        public Node () {
            child = new Node[26];
        }
    }

    Node root;

    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node curr = root;
        int in;
        for (int i = 0;i < word.length();i++) {
            in = word.charAt(i) - 'a';
            if (curr.child[in] == null) {
                curr.child[in] = new Node();
            }
            curr.child[in].count++;
            curr = curr.child[in];
        }
        curr.endsHere += 1;
    }

    public boolean search(String word) {
        Node curr = root;
        int in;
        for (int i = 0;i < word.length();i++) {
            in = word.charAt(i) - 'a';
            if (curr.child[in] == null) {
                return false;
            }
            curr = curr.child[in];
        }
        return (curr.endsHere > 0);
    }

    public boolean startsWith(String prefix) {
        Node curr = root;
        int in;
        for (int i = 0;i < prefix.length();i++) {
            in = prefix.charAt(i) - 'a';
            if (curr.child[in] == null) {
                return false;
            }
            curr = curr.child[in];
        }
        return (curr.count > 0);
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */