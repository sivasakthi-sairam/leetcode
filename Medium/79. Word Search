class Solution {
    public static boolean backtracking(int r, int c, char[][] board, String word, int index, int[][] visited) {
        if (index == word.length()) {
            return true;
        }
        if (r >= board.length || c >= board[0].length || r < 0 || c < 0 || visited[r][c] == 1 ||
         board[r][c] != word.charAt(index)) {
            return false;
        }
        visited[r][c] = 1;
        boolean result = backtracking(r+1, c, board, word, index + 1, visited) ||
         backtracking(r-1, c, board, word, index + 1, visited) ||
         backtracking(r, c+1, board, word, index + 1, visited) ||
         backtracking(r, c-1, board, word, index + 1, visited);
        visited[r][c] = 0;
        return result;
    }

    public boolean exist(char[][] board, String word) {
        int[][] visited = new int[board.length][board[0].length];
        for (int i = 0;i < board.length;i++) {
            for (int j = 0;j < board[0].length;j++) {
                if (backtracking(i, j, board, word, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
}