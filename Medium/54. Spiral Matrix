class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int startRow = 0;
        int startCol = 0;
        int endRow = n - 1;
        int endCol = m - 1;
        List<Integer> result = new ArrayList<>();
        int size = 0;
        int i;
        while (size < (n * m)) {
            for (i = startCol;i <= endCol;i++) {
                result.add(matrix[startRow][i]);
                size++;
            }
            if (size == (n*m)) {
                break;
            }
            for (i = startRow + 1;i <= endRow;i++) {
                result.add(matrix[i][endCol]);
                size++;
            }
            if (size == (n * m)) {
                break;
            }
            for (i = endCol-1;i >= startCol;i--) {
                result.add(matrix[endRow][i]);
                size++;
            }
            if (size == (n * m)) {
                break;
            }
            for (i = endRow-1;i > startRow;i--) {
                result.add(matrix[i][startCol]);
                size++;
            }
            if (size == (n*m)) {
                break;
            }
            startRow++;
            endRow--;
            startCol++;
            endCol--;
        }
        return result;
    }
}