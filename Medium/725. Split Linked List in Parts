/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        int len = 0;
        ListNode temp = head;
        while (temp != null) {
            len++;
            temp = temp.next;
        }
        ListNode[] result = new ListNode[k];
        ListNode cur, next;
        if (len <= k) {
            cur = head;
            for (int i = 0;i < k;i++) {
                result[i] = cur;
                if (cur != null) {
                    next = cur.next;
                    cur.next = null;
                    cur = next;
                }
            }
        } else {
            int initPart = len / k;
            int extra = len % k;
            int i = 0;
            cur = head;
            while (i < extra) {
                result[i] = cur;
                for (int j = 0;j < initPart;j++) {
                    cur = cur.next;
                }
                next = cur.next;
                cur.next = null;
                cur = next;
                i++;
            }
            while (i < k) {
                result[i] = cur;
                for (int j = 0;j < initPart - 1;j++) {
                    cur = cur.next;
                }
                next = cur.next;
                cur.next = null;
                cur = next;
                i++;
            }
        }
        return result;
    }
}