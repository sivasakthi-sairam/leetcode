/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode mergeSort(ListNode node) {
        if (node == null || node.next == null) {
            return node;
        }
        ListNode mid = findMiddle(node);
        ListNode nextToMid = mid.next;
        mid.next = null;
        ListNode left = mergeSort(node);
        ListNode right = mergeSort(nextToMid);
        ListNode sorted = merge(left, right);
        return sorted;
    }

    public static ListNode merge(ListNode node1, ListNode node2) {
        if (node1 == null) {
            return node2;
        }
        if (node2 == null) {
            return node1;
        }
        ListNode result = null;
        if (node1.val < node2.val) {
            result = node1;
            result.next = merge(node1.next, node2);
        } else {
            result = node2;
            result.next = merge(node1, node2.next);
        }
        return result;
    }

    public static ListNode findMiddle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public ListNode sortList(ListNode head) {
        ListNode sortedHead = mergeSort(head);
        return sortedHead;
    }
}