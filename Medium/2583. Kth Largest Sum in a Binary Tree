/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        if (root == null) {
            return -1;
        }
        PriorityQueue<Long> minHeap = new PriorityQueue<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int size;
        long levelSum;
        TreeNode cur;
        while (queue.size() > 0) {
            size = queue.size();
            levelSum = 0;
            for (int i = 0;i < size;i++) {
                cur = queue.remove();
                levelSum += cur.val;
                if (cur.left != null) {
                    queue.add(cur.left);
                }
                if (cur.right != null) {
                    queue.add(cur.right);
                }
            }
            if (minHeap.size() < k) {
                minHeap.add(levelSum);
            } else if (minHeap.peek() < levelSum) {
                minHeap.remove();
                minHeap.add(levelSum);
            }
        }
        if (minHeap.size() < k) {
            return -1;
        }
        return minHeap.peek();
    }
}