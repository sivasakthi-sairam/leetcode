class Solution {
    public boolean bfs (int node, int[] oddEven, List<List<Integer>> graph) {
        if (oddEven[node] != 0) {
            return true;
        }
        Queue<Integer> queue = new LinkedList<>();
        oddEven[node] = -1;
        queue.add(node);
        while (queue.size() > 0) {
            int curr = queue.remove();
            for (int adjNode : graph.get(curr)) {
                if (oddEven[curr] == oddEven[adjNode]) {
                    return false;
                }
                if (oddEven[adjNode] == 0) {
                    oddEven[adjNode] = - (oddEven[curr]);
                    queue.add(adjNode);
                }
            }
        }
        return true;
    }

    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0;i <= n;i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] arr : dislikes) {
            graph.get(arr[0]).add(arr[1]);
            graph.get(arr[1]).add(arr[0]);
        }
        int[] oddEven = new int[n+1];
        for (int i = 1;i <= n;i++) {
            if (!bfs(i, oddEven, graph)) {
                return false;
            }
        }
        return true;
    }
}