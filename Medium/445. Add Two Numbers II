/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode head = new ListNode(0);
        ListNode dummy = head;
        int carry = 0;
        int val;
        while (l1 != null && l2 != null) {
            val = l1.val + l2.val + carry;
            head.next = new ListNode(val % 10);
            carry = val / 10;
            head = head.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            val = l1.val + carry;
            head.next = new ListNode(val % 10);
            carry = val / 10;
            head = head.next;
            l1 = l1.next;
        }
        while (l2 != null) {
            val = l2.val + carry;
            head.next = new ListNode(val % 10);
            carry = val / 10;
            head = head.next;
            l2 = l2.next;
        }
        if (carry > 0) {
            head.next = new ListNode(carry);
        }
        return reverse(dummy.next);
    }

    public static ListNode reverse(ListNode head) {
        ListNode prev = null, next = null, current = head;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}