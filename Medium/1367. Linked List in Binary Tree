/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean findNodes(ListNode listNode, TreeNode treeNode) {
        if (listNode == null) {
            return true;
        }
        if (treeNode == null || treeNode.val != listNode.val) {
            return false;
        }
        if (findNodes(listNode.next, treeNode.left) || findNodes(listNode.next, treeNode.right)) {
            return true;
        }
        return false;
    }

    public boolean preorder(ListNode head, TreeNode root) {
        if (root == null) {
            return false;
        }
        if (head == null) {
            return true;
        }
        if (root.val == head.val) {
            if (findNodes(head, root)) {
                return true;
            }
        }
        if (preorder(head, root.left)) {
            return true;
        }
        if (preorder(head, root.right)) {
            return true;
        }
        return false;
    }

    public boolean isSubPath(ListNode head, TreeNode root) {
        return preorder(head, root);
    }
}