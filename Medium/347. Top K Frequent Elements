class Node {
    int element;
    int frequency;
    public Node (int ele, int freq) {
        this.element = ele;
        this.frequency = freq;
    }
}

class CustomComparator implements Comparator<Node> {
    public int compare(Node a, Node b) {
        return b.frequency - a.frequency;
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Node> heap = new PriorityQueue<>(map.size(), new CustomComparator());
        for (int i : map.keySet()) {
            heap.add(new Node(i, map.get(i)));
        }
        int[] result = new int[k];
        for (int i = 0;i < k;i++) {
            result[i] = heap.remove().element;
        }
        return result;
    }
}