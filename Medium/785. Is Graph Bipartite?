class Solution {
    public boolean bfs (int node, int[] oddEven, int[][] graph) {
        if (oddEven[node] != 0) {
            return true;
        }
        Queue<Integer> queue = new LinkedList<>();
        oddEven[node] = -1;
        queue.add(node);
        while (queue.size() > 0) {
            int curr = queue.remove();
            for (int i = 0;i < graph[curr].length;i++) {
                int adjNode = graph[curr][i];
                if (oddEven[curr] == oddEven[adjNode]) {
                    return false;
                }
                if (oddEven[adjNode] == 0) {
                    oddEven[adjNode] = - (oddEven[curr]);
                    queue.add(adjNode);
                }
            }
        }
        return true;
    }

    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] oddEven = new int[n];
        for (int i = 0;i < n;i++) {
            if (!bfs(i, oddEven, graph)) {
                return false;
            }
        }
        return true;
    }
}