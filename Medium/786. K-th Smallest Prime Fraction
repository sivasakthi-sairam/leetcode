class Solution {

    class Node implements Comparable<Node>{
        int numerator, denominator;
        double val;
        public Node (int n, int d, double v) {
            numerator = n;
            denominator = d;
            val = v;
        }

        public int compareTo(Node other) {
            return (other.val > this.val) ? 1 : -1;
        }
    }

    public int[] kthSmallestPrimeFraction(int[] arr, int k) {
        int n = arr.length;
        double val;
        PriorityQueue<Node> maxHeap = new PriorityQueue<>();
        for (int i = 0;i < n;i++) {
            for (int j = i + 1;j < n;j++) {
                val = (double) (arr[i]) / (double) (arr[j]);
                if (maxHeap.size() < k) {
                    maxHeap.add(new Node(arr[i], arr[j], val));
                } else if (maxHeap.size() == k && maxHeap.peek().val > val) {
                    maxHeap.remove();
                    maxHeap.add(new Node(arr[i], arr[j], val));
                }
            }
        }
        int[] result = new int[2];
        result[0] = maxHeap.peek().numerator;
        result[1] = maxHeap.peek().denominator;
        return result;
    }
}