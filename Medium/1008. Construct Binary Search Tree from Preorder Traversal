/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static int constructBst(int[] preorder, int n, int pos, TreeNode curr, int min, int max) {
        if (pos == n || preorder[pos] < min || preorder[pos] > max) {
            return pos;
        }
        if (preorder[pos] < curr.val) {
            curr.left = new TreeNode(preorder[pos]);
            pos += 1;
            pos = constructBst(preorder, n, pos, curr.left, min, curr.val - 1);
        }
        if (pos == n || preorder[pos] < min || preorder[pos] > max) {
            return pos;
        }
        curr.right = new TreeNode(preorder[pos]);
        pos += 1;
        pos = constructBst(preorder, n, pos, curr.right, curr.val + 1, max);
        return pos;
    }

    public TreeNode bstFromPreorder(int[] preorder) {
        if (preorder.length == 0) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[0]);
        if (preorder.length == 1) {
            return root;
        }
        constructBst(preorder, preorder.length, 1, root, Integer.MIN_VALUE, Integer.MAX_VALUE);
        return root;
    }
}