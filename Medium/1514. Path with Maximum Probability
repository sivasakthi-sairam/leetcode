class Solution {
    class Node implements Comparable<Node> {
        int dest;
        double prob;
        public Node (int dt, double pb) {
            dest = dt;
            prob = pb;
        }

        public int compareTo(Node that) {
            return this.prob < that.prob ? 1 : -1;
        }
    }

    public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        List<List<Node>> adjList = new ArrayList<>();
        for (int i = 0;i < n;i++) {
            adjList.add(new ArrayList<>());
        }
        for (int i = 0;i < edges.length;i++) {
            adjList.get(edges[i][0]).add(new Node(edges[i][1], succProb[i]));
            adjList.get(edges[i][1]).add(new Node(edges[i][0], succProb[i]));
        }
        boolean[] visited = new boolean[n];
        PriorityQueue<Node> maxHeap = new PriorityQueue<>();
        maxHeap.add(new Node(start_node, 1));
        while (maxHeap.size() > 0) {
            Node curr = maxHeap.remove();
            int currNode = curr.dest;
            double currProb = curr.prob;
            if (currNode == end_node) {
                return currProb;
            }
            visited[currNode] = true;
            for (Node adjNode : adjList.get(currNode)) {
                if (!visited[adjNode.dest]) {
                    maxHeap.add(new Node(adjNode.dest, currProb * adjNode.prob));
                }
            }
        }
        return 0;
    }
}