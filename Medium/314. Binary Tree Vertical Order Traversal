/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static void preOrderDfs(TreeNode curr, int row, int col, TreeMap<Integer, TreeMap<Integer, List<Integer>>> plotMap) {
        if (curr == null) {
            return;
        }
        plotMap.putIfAbsent(col, new TreeMap<Integer, List<Integer>>());
        plotMap.get(col).putIfAbsent(row, new ArrayList<Integer>());
        plotMap.get(col).get(row).add(curr.val);
        preOrderDfs(curr.left, row + 1, col - 1, plotMap);
        preOrderDfs(curr.right, row + 1, col + 1, plotMap);
    }

    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> bigList = new ArrayList<>();
        if (root == null) {
            return bigList;
        }
        TreeMap<Integer, TreeMap<Integer, List<Integer>>> plotMap = new TreeMap<>();
        preOrderDfs(root, 0, 0, plotMap);
        for (int col : plotMap.keySet()) {
            List<Integer> colList = new ArrayList<>();
            for (int row : plotMap.get(col).keySet()) {
                colList.addAll(plotMap.get(col).get(row));
            }
            bigList.add(colList);
        }
        return bigList;
    }
}