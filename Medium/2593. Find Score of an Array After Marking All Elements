class Solution {

    class Node implements Comparable<Node> {
        int val, idx;

        public Node (int a, int b) {
            val = a;
            idx = b;
        }

        public int compareTo(Node other) {
            if (this.val == other.val) {
                return this.idx - other.idx;
            }
            return this.val - other.val;
        }
    }

    public long findScore(int[] nums) {
        int n = nums.length;
        boolean[] visited = new boolean[n];
        PriorityQueue<Node> minHeap = new PriorityQueue<>();
        for (int i = 0;i < n;i++) {
            minHeap.add(new Node(nums[i], i));
        }
        long score = 0;
        Node cur;
        while (minHeap.size() > 0) {
            cur = minHeap.remove();
            if (visited[cur.idx]) {
                continue;
            }
            score += cur.val;
            visited[cur.idx] = true;
            if (cur.idx - 1 >= 0) {
                visited[cur.idx - 1] = true;
            }
            if (cur.idx + 1 < n) {
                visited[cur.idx + 1] = true;
            }
        }
        return score;
    }
}